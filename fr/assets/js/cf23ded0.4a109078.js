"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1375],{441:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/12/30/yearly-update","metadata":{"permalink":"/fr/blog/2022/12/30/yearly-update","editUrl":"https://crowdin.com/project/pnpm/fr","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2022-12-30-yearly-update.md","title":"L\'ann\xe9e 2022 pour pnpm","description":"C\'est la fin de l\'ann\xe9e. Une ann\xe9e vraiment difficile. Comme vous le savez peut-\xeatre, je vis en Ukraine, donc en raison de l\'invasion russe contre nous, il \xe9tait plus difficile de diriger ce projet compar\xe9 aux ann\xe9es pr\xe9c\xe9dentes. N\xe9anmoins, ce fut une bonne ann\xe9e pour pnpm. Nous avons eu beaucoup de nouveaux utilisateurs, contributeurs, et nous avons impl\xe9ment\xe9 de nombreuses fonctionnalit\xe9s int\xe9ressantes.","date":"2022-12-30T00:00:00.000Z","formattedDate":"30 d\xe9cembre 2022","tags":[],"readingTime":2.64,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"L\'ann\xe9e 2022 pour pnpm","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48","image":"/img/blog/2022-review.png"},"nextItem":{"title":"L\'ann\xe9e 2021 pour pnpm","permalink":"/fr/blog/2021/12/29/yearly-update"}},"content":"C\'est la fin de l\'ann\xe9e. Une ann\xe9e vraiment difficile. Comme vous le savez peut-\xeatre, je vis en Ukraine, donc en raison de l\'invasion russe contre nous, il \xe9tait plus difficile de diriger ce projet compar\xe9 aux ann\xe9es pr\xe9c\xe9dentes. N\xe9anmoins, ce fut une bonne ann\xe9e pour pnpm. Nous avons eu beaucoup de nouveaux utilisateurs, contributeurs, et nous avons impl\xe9ment\xe9 de nombreuses fonctionnalit\xe9s int\xe9ressantes.\\n\\n![](/img/blog/2022-review.png)\\n\\n(l\'illustration ci-dessus a \xe9t\xe9 g\xe9n\xe9r\xe9e par Midjourney. Le tigre symbolise l\'ann\xe9e du tigre)\\n\\n\x3c!--truncate--\x3e\\n\\n## Utilisation\\n\\n### Statistiques de t\xe9l\xe9chargement\\n\\nMon objectif cette ann\xe9e \xe9tait de battre Lerna en nombre de t\xe9l\xe9chargements. Nous avons pu atteindre cet objectif [en ao\xfbt](https://npm-stat.com/charts.html?package=pnpm&package=lerna&from=2022-01-01&to=2022-12-30)\xa0:\\n\\n![](/img/blog/pnpm-vs-lerna-stats.png)\\n\\npnpm a \xe9t\xe9 t\xe9l\xe9charg\xe9 plus de [5 fois plus](https://npm-stat.com/charts.html?package=pnpm&from=2016-12-01&to=2022-12-30) en 2022 qu\'en 2021 :\\n\\n![](/img/blog/download-stats-2022.png)\\n\\n### Visites des documents\\n\\nNous recueillons des statistiques non personnalis\xe9es sur nos documentations \xe0 l\'aide de Google Analytics. En 2022, nous avions parfois eu plus de 20 000 visiteurs uniques par semaine. C\'est 10 fois plus qu\'en 2021 !\\n\\n![](/img/blog/ga-unique-visits-2022.png)\\n\\n### \xc9toiles GitHub\\n\\nNotre [d\xe9pot GitHub principal](https://github.com/pnpm/pnpm) a presque re\xe7u plus de 7 000 \xe9toiles cette ann\xe9e.\\n\\n![](/img/blog/stars-2022.png)\\n\\n### Nos contributeurs\\n\\nNous avons eu beaucoup de contributeurs nouveux et actifs cette ann\xe9e. Voici les personnes qui ont eu au moins une PR d\'int\xe9gr\xe9e dans pnpm en 2022 :\\n\\n* [Zoltan Kochan](https://github.com/zkochan)\\n* [chlorine](https://github.com/lvqq)\\n* [await-ovo](https://github.com/await-ovo)\\n* [Brandon Cheng](https://github.com/gluxon)\\n* [Dominic Elm](https://github.com/d3lm)\\n* [MCMXC](https://github.com/mcmxcdev)\\n* [\u90a3\u91cc\u597d\u810f\u4e0d\u53ef\u4ee5](https://github.com/dev-itsheng)\\n* [Homyee King](https://github.com/HomyeeKing)\\n* [Shinobu Hayashi](https://github.com/Shinyaigeek)\\n* [Black-Hole](https://github.com/BlackHole1)\\n* [Kenrick](https://github.com/kenrick95)\\n* [Weyert de Boer](https://github.com/weyert)\\n* [Glen Whitney](https://github.com/gwhitney)\\n* [Cheng](https://github.com/chengcyber)\\n* [zoomdong](https://github.com/fireairforce)\\n* [thinkhalo](https://github.com/ufec)\\n* [\u5b50\u77bb Luci](https://github.com/LuciNyan)\\n* [spencer17x](https://github.com/Spencer17x)\\n* [liuxingbaoyu](https://github.com/liuxingbaoyu)\\n* [\uc7a5\uc9c0\ud6c8](https://github.com/WhiteKiwi)\\n* [Jon de la Motte](https://github.com/jondlm)\\n* [Jack Works](https://github.com/Jack-Works)\\n* [milahu](https://github.com/milahu)\\n* [David Collins](https://github.com/David-Collins)\\n* [nikoladev](https://github.com/nikoladev)\\n* [Igor Bezkrovnyi](https://github.com/ibezkrovnyi)\\n* [Lev Chelyadinov](https://github.com/illright)\\n* [javier-garcia-meteologica](https://github.com/javier-garcia-meteologica)\\n\\n## Fonctionnalit\xe9s marquantes\\n\\n### Support d\'un `node_modules` standard sans liens symboliques (depuis la [v6.25.0](https://github.com/pnpm/pnpm/releases/tag/v6.25.0))\\n\\nD\xe8s le d\xe9but de 2022, nous avons ajout\xe9 la prise en charge du \\"traditionnel\\" `node_modules` (aussi appel\xe9 `node_modules` plat). Nous utilisons l\'algorithme de hissage de Yarn pour cr\xe9er un `node_modules` plat correct. Cette nouvelle fonctionnalit\xe9 a essentiellement rendu pnpm compatible avec toutes les piles Node.js qui sont compatibles avec la CLI npm.\\n\\nPour utiliser la structure de `node_modules` plat, utilisez le param\xe8tre `node-linker=hoisted` dans un fichier `.npmrc`.\\n\\n### Cache d\'effets secondaires (depuis la [v7.0.0](https://github.com/pnpm/pnpm/releases/tag/v7.0.0))\\n\\nDepuis la v7, le cache d\'effets secondaires ([side-effect-cache][]) est activ\xe9 par d\xe9faut. Les d\xe9pendances qui doivent \xeatre compil\xe9es ne le sont donc qu\'une seule fois sur une machine. Cela am\xe9liore consid\xe9rablement la vitesse d\'installation dans les projets qui ont des d\xe9pendances avec des scripts de compilation.\\n\\n### Correction des d\xe9pendances (depuis la [v7.4.0](https://github.com/pnpm/pnpm/releases/tag/v7.4.0))\\n\\nLa commande [`pnpm patch`][] a \xe9t\xe9 ajout\xe9e pour corriger les d\xe9pendances dans votre `node_modules`.\\n\\n### Strat\xe9gie de r\xe9solution bas\xe9e sur le temps (depuis la [v7.10.0](https://github.com/pnpm/pnpm/releases/tag/v7.10.0))\\n\\nUn nouveau mode de r\xe9solution a \xe9t\xe9 ajout\xe9 \xe0 pnpm, ce qui devrait rendre plus s\xe9curis\xe9e la mise \xe0 jour de d\xe9pendances. Vous pouvez changer le mode de r\xe9solution avec le param\xe8tre [resolution-mode][].\\n\\n### Liste des licences des d\xe9pendances (depuis la [v7.17.0](https://github.com/pnpm/pnpm/releases/tag/v7.17.0))\\n\\nVous pouvez maintenant utiliser la commande [`pnpm licences list`][] pour afficher les licences des d\xe9pendances install\xe9es.\\n\\n[side-effect-cache]: /npmrc#side-effects-cache\\n\\n[`pnpm patch`]: /cli/patch\\n\\n[resolution-mode]: https://pnpm.io/npmrc#resolution-mode\\n\\n[`pnpm licences list`]: /cli/licenses"},{"id":"/2021/12/29/yearly-update","metadata":{"permalink":"/fr/blog/2021/12/29/yearly-update","editUrl":"https://crowdin.com/project/pnpm/fr","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2021-12-29-yearly-update.md","title":"L\'ann\xe9e 2021 pour pnpm","description":"C\'est la fin de l\'ann\xe9e et ce fut une bonne ann\xe9e pour pnpm, alors voyons comment elle s\'est d\xe9roul\xe9e.","date":"2021-12-29T00:00:00.000Z","formattedDate":"29 d\xe9cembre 2021","tags":[],"readingTime":2.88,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"L\'ann\xe9e 2021 pour pnpm","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"},"prevItem":{"title":"L\'ann\xe9e 2022 pour pnpm","permalink":"/fr/blog/2022/12/30/yearly-update"},"nextItem":{"title":"Options de configuration des node_modules avec pnpm","permalink":"/fr/blog/2020/10/17/node-modules-configuration-options-with-pnpm"}},"content":"C\'est la fin de l\'ann\xe9e et ce fut une bonne ann\xe9e pour pnpm, alors voyons comment elle s\'est d\xe9roul\xe9e.\\n\\n\x3c!--truncate--\x3e\\n\\n## Utilisation\\n\\n### Statistiques de t\xe9l\xe9chargement\\n\\nMon objectif cette ann\xe9e \xe9tait de battre Bower en nombre de t\xe9l\xe9chargements. Nous avons pu atteindre cet objectif [en novembre](https://npm-stat.com/charts.html?package=pnpm&package=bower&from=2021-01-01&to=2021-12-29)\xa0:\\n\\n![](/img/blog/pnpm-vs-bower-stats.png)\\n\\npnpm a \xe9t\xe9 t\xe9l\xe9charg\xe9 environ [3 fois plus](https://npm-stat.com/charts.html?package=pnpm&from=2016-12-01&to=2021-12-29) en 2021 qu\'en 2020\xa0:\\n\\n![](/img/blog/download-stats-2021.png)\\n\\n:::note\\n\\nCes statistiques ne mesurent m\xeame pas toutes les diff\xe9rentes fa\xe7ons dont pnpm peut \xeatre install\xe9\xa0! Celles-ci ne mesurent que les t\xe9l\xe9chargements du [package pnpm depuis npm](https://www.npmjs.com/package/pnpm). Cette ann\xe9e, nous avons \xe9galement ajout\xe9 les versions binaires compil\xe9es de pnpm, qui sont livr\xe9es diff\xe9remment.\\n\\n:::\\n\\n### Visites des documents\\n\\nNous recueillons des statistiques non personnalis\xe9es sur nos documents \xe0 l\'aide de Google Analytics. En 2021, nous avions parfois plus de 2 000 visiteurs uniques par semaine.\\n\\n![](/img/blog/ga-unique-visits-2021.png)\\n\\nLa plupart de nos utilisateurs sont originaires des \xc9tats-Unis et de la Chine.\\n\\n![](/img/blog/countries-2021.png)\\n\\n### \xc9toiles GitHub\\n\\nNotre [d\xe9p\xf4t principal sur GitHub](https://github.com/pnpm/pnpm) a re\xe7u plus de 5 000 \xe9toiles cette ann\xe9e.\\n\\n![](/img/blog/stars-2021.png)\\n\\n### Nouveaux utilisateurs\\n\\nNotre nouvel utilisateur le plus important cette ann\xe9e est [Bytedance](https://github.com/pnpm/pnpm.github.io/pull/89) (la soci\xe9t\xe9 derri\xe8re TikTok).\\n\\nDe plus, de nombreux projets importants open-source ont commenc\xe9 \xe0 utiliser pnpm. Certains sont pass\xe9s \xe0 pnpm en raison de son excellent support des monorepos\xa0:\\n\\n* [Vue](https://github.com/vuejs/vue-next)\\n* [Vite](https://github.com/vitejs/vite)\\n* et d\'[autres](https://pnpm.io/workspaces#usage-examples) encore\\n\\nCertains ont chang\xe9 parce qu\'ils appr\xe9cient l\'efficacit\xe9, la rapidit\xe9 et la beaut\xe9 de pnpm\xa0:\\n\\n* [Autoprefixer](https://twitter.com/Autoprefixer/status/1476226146488692736)\\n* [PostCSS](https://twitter.com/PostCSS/status/1470438664006258701)\\n* [Browserslist](https://twitter.com/Browserslist/status/1468264308308156419)\\n\\n## Fonctionnalit\xe9s marquantes\\n\\n### Nouveau format du fichier lockfile (depuis [v6.0.0](https://github.com/pnpm/pnpm/releases/tag/v6.0.0))\\n\\nL\'un des premiers et des plus importants changements de cette ann\xe9e a \xe9t\xe9 le nouveau format de `pnpm-lock.yaml`. Il s\'agissait d\'un changement de rupture, nous avons donc d\xfb publier la v6. Mais ce fut un succ\xe8s. L\'ancien fichier lockfile provoquait fr\xe9quemment des conflits avec Git. Depuis l\'introduction du nouveau format, nous n\'avons re\xe7u aucune plainte concernant des conflits Git.\\n\\n### Gestion des versions de Node.js (depuis [v6.12.0](https://github.com/pnpm/pnpm/releases/tag/v6.12.0))\\n\\nNous avons livr\xe9 une nouvelle commande (`pnpm env`) qui permet de g\xe9rer les versions de Node.js. Vous pouvez donc utiliser pnpm \xe0 la place des gestionnaires de version de Node.js comme nvm ou Volta.\\n\\nDe plus, pnpm est livr\xe9 sous la forme d\'un ex\xe9cutable autonome, de sorte que vous puissiez l\'ex\xe9cuter m\xeame sans que Node.js soit pr\xe9install\xe9 sur le syst\xe8me.\\n\\n### Injection de d\xe9pendances locales (depuis [v6.20.0](https://github.com/pnpm/pnpm/releases/tag/v6.20.0))\\n\\nVous pouvez \xab\xa0injecter\xa0\xbb une d\xe9pendance locale. Par d\xe9faut, les d\xe9pendances locales sont li\xe9es symboliquement \xe0 `node_modules` mais avec cette nouvelle fonctionnalit\xe9, vous pouvez demander \xe0 pnpm de lier \xe0 la place en dur les fichiers du package.\\n\\n### Am\xe9lioration du signalement des probl\xe8mes de d\xe9pendance entre pairs (depuis [v6.24.0](https://github.com/pnpm/pnpm/releases/tag/v6.24.0))\\n\\nLes probl\xe8mes de d\xe9pendance des pairs (\xab peer dependency\xa0\xbb) \xe9taient auparavant imprim\xe9s en texte simple et il \xe9tait difficile de les comprendre. Elles sont maintenant toutes regroup\xe9es et affich\xe9es dans une belle structure hi\xe9rarchique.\\n\\n## La comp\xe9tition\\n\\n### Yarn\\n\\nYarn a ajout\xe9 un gestionnaire de liens pnpm dans la [v3.1](https://dev.to/arcanis/yarn-31-corepack-esm-pnpm-optional-packages--3hak#new-install-mode-raw-pnpm-endraw-). Ainsi, Yarn peut cr\xe9er une structure de r\xe9pertoire node-modules similaire \xe0 celle cr\xe9\xe9e par pnpm.\\n\\nDe plus, l\'\xe9quipe de Yarn pr\xe9voit d\'impl\xe9menter un stockage adressable par le contenu pour \xeatre plus efficace en termes d\'espace disque.\\n\\n### npm\\n\\nL\'\xe9quipe npm a d\xe9cid\xe9 d\'adopter \xe9galement la structure de r\xe9pertoire node-modules avec liens symboliques utilis\xe9e par pnpm ([RFC](https://github.com/npm/rfcs/blob/main/accepted/0042-isolated-mode.md) associ\xe9e).\\n\\n### Autres\\n\\n[Bun](https://twitter.com/jarredsumner/status/1473416431291174912/photo/1) \xe9crit en Zig et [Volt](https://github.com/voltpkg/volt) \xe9crit en Rust pr\xe9tendent tous deux \xeatre plus rapides que npm/Yarn/pnpm. Je n\'ai pas encore \xe9valu\xe9 ces nouveaux gestionnaires de packages.\\n\\n## Plans futurs\\n\\nPlus vite, mieux, le meilleur."},{"id":"/2020/10/17/node-modules-configuration-options-with-pnpm","metadata":{"permalink":"/fr/blog/2020/10/17/node-modules-configuration-options-with-pnpm","editUrl":"https://crowdin.com/project/pnpm/fr","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2020-10-17-node-modules-configuration-options-with-pnpm.md","title":"Options de configuration des node_modules avec pnpm","description":"Il existe de nombreuses fa\xe7ons de cr\xe9er un dossier nodemodules. Votre objectif doit \xeatre de cr\xe9er le plus strict, mais si ce n\'est pas possible, il y a aussi des options pour faire un nodemodules en vrac.","date":"2020-10-17T00:00:00.000Z","formattedDate":"17 octobre 2020","tags":[],"readingTime":1.925,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"Options de configuration des node_modules avec pnpm","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"},"prevItem":{"title":"L\'ann\xe9e 2021 pour pnpm","permalink":"/fr/blog/2021/12/29/yearly-update"},"nextItem":{"title":"Flat node_modules n\'est pas le seul moyen","permalink":"/fr/blog/2020/05/27/flat-node-modules-is-not-the-only-way"}},"content":"Il existe de nombreuses fa\xe7ons de cr\xe9er un dossier node_modules. Votre objectif doit \xeatre de cr\xe9er le plus strict, mais si ce n\'est pas possible, il y a aussi des options pour faire un node_modules en vrac.\\n\\n\x3c!--truncate--\x3e\\n\\n## Configuration par d\xe9faut\\n\\nPar d\xe9faut, pnpm v5 cr\xe9era un node_modules semi-strict. Semi-strict signifie que votre application ne pourra require que des packages ajout\xe9s en tant que d\xe9pendances au `package.json` (\xe0 quelques exceptions pr\xe8s). Cependant, vos d\xe9pendances pourront acc\xe9der \xe0 tous les packages.\\n\\nLa configuration par d\xe9faut ressemble \xe0 ceci:\\n\\n```ini\\n; Tous les packages sont hiss\xe9s vers node_modules/.pnpm/node_modules\\nhoist-pattern[]=*\\n\\n; Tous les types sont hiss\xe9s \xe0 la racine afin de rendre TypeScript heureux\\npublic-hoist-pattern[]=*types*\\n\\n; Tous les packages li\xe9s \xe0 ESLint sont \xe9galement hiss\xe9s \xe0 la racine\\npublic-hoist-pattern[]=*eslint*\\n```\\n\\n## Plug\'n\'Play. La configuration la plus stricte\\n\\npnpm prend en charge [Yarn\'s Plug\'n\'Play](https://yarnpkg.com/features/pnp) depuis la version 5.9. Avec PnP, votre application et les d\xe9pendances de votre application n\'auront acc\xe8s qu\'\xe0 leurs d\xe9pendances d\xe9clar\xe9es. C\'est encore plus strict que de d\xe9finir `hoist=false` car \xe0 l\'int\xe9rieur d\'un monorepo, votre application ne pourra m\xeame pas acc\xe9der aux d\xe9pendances du projet racine.\\n\\nPour utiliser Plug\'n\'Play, d\xe9finissez ces param\xe8tres:\\n\\n```ini\\nnode-linker=pnp\\nsymlink=false\\n```\\n\\n## Un r\xe9pertoire de node_modules strict et traditionnel\\n\\nSi vous n\'\xeates pas encore pr\xeat \xe0 utiliser PnP, vous pouvez toujours \xeatre strict et autoriser uniquement les packages \xe0 acc\xe9der \xe0 leurs propres d\xe9pendances en d\xe9finissant la configuration de hoist sur false:\\n\\n```ini\\nhoist=false\\n```\\n\\nCependant, si certaines de vos d\xe9pendances tentent d\'acc\xe9der \xe0 des packages qui ne figurent pas dans leurs d\xe9pendances, vous avez deux options:\\n\\n1. Cr\xe9ez un `pnpmfile.js` et utilisez un [crochet](/pnpmfile) pour ajouter la d\xe9pendance manquante au manifeste du package.\\n\\n2. Ajoutez un pattern au param\xe8tre `hoist-pattern`. Par exemple, si le module non trouv\xe9 est `babel-core`, ajoutez le param\xe8tre suivant \xe0 `.npmrc`:\\n\\n    ```ini\\n    hoist-pattern[]=babel-core\\n    ```\\n\\n## Le pire des cas - hisser \xe0 la racine\\n\\nCertains outils peuvent ne pas fonctionner m\xeame avec la configuration par d\xe9faut de pnpm, qui h\xe9berge tout \xe0 la racine du magasin virtuel et quelques packages \xe0 la racine. Dans ce cas, vous pouvez hisser tout ou un sous-ensemble de d\xe9pendances \xe0 la racine du r\xe9pertoire des modules.\\n\\nTout hisser \xe0 la racine de node_modules\xa0:\\n\\n```ini\\nshamefully-hoist=true\\n```\\n\\nNe hisser que les packages qui correspondent \xe0 un mod\xe8le:\\n\\n```ini\\npublic-hoist-pattern[]=babel-*\\n```"},{"id":"/2020/05/27/flat-node-modules-is-not-the-only-way","metadata":{"permalink":"/fr/blog/2020/05/27/flat-node-modules-is-not-the-only-way","editUrl":"https://crowdin.com/project/pnpm/fr","source":"@site/i18n/fr/docusaurus-plugin-content-blog/2020-05-27-flat-node-modules-is-not-the-only-way.md","title":"Flat node_modules n\'est pas le seul moyen","description":"Les nouveaux utilisateurs de pnpm me posent souvent des questions sur la structure bizarre du dossier node_modules que pnpm cr\xe9\xe9. Pourquoi n\'est-il pas plat ? O\xf9 sont toutes les sous-d\xe9pendances ?","date":"2020-05-27T00:00:00.000Z","formattedDate":"27 mai 2020","tags":[],"readingTime":2.895,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"Flat node_modules n\'est pas le seul moyen","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"},"prevItem":{"title":"Options de configuration des node_modules avec pnpm","permalink":"/fr/blog/2020/10/17/node-modules-configuration-options-with-pnpm"}},"content":"Les nouveaux utilisateurs de pnpm me posent souvent des questions sur la structure bizarre du dossier `node_modules` que pnpm cr\xe9\xe9. Pourquoi n\'est-il pas plat ? O\xf9 sont toutes les sous-d\xe9pendances ?\\n\\n\x3c!--truncate--\x3e\\n\\n> Je vais supposer que les lecteurs de cet article sont d\xe9j\xe0 familiers avec les `node_modules` plats cr\xe9\xe9s par npm et Yarn. Si vous ne comprenez pas pourquoi npm 3 a d\xfb commencer \xe0 utiliser `node_modules` en v3, vous pouvez trouver un peu de pr\xe9histoire dans [Pourquoi devrait-on utiliser pnpm ?](https://www.kochan.io/nodejs/why-should-we-use-pnpm.html).\\n\\nAlors pourquoi les `node_modules` de pnpm sont inhabituels ? Cr\xe9ons deux r\xe9pertoires et \xe9xecutons `npm add express` dans l\'un d\'eux et `pnpm add express` dans l\'autre. Voil\xe0 ce que vous obtenez dans le `node_modules` du premier r\xe9pertoire:\\n\\n```text\\n.bin\\naccepts\\narray-flatten\\nbody-parser\\nbytes\\ncontent-disposition\\ncookie-signature\\ncookie\\ndebug\\ndepd\\ndestroy\\nee-first\\nencodeurl\\nescape-html\\netag\\nexpress\\n```\\n\\nVous pouvez voir tout le r\xe9pertoire [ici](https://github.com/zkochan/comparing-node-modules/tree/master/npm-example/node_modules).\\n\\nEt voici ce que vous obtenez dans les `node_modules` cr\xe9\xe9s par pnpm:\\n\\n```text\\n.pnpm\\n.modules.yaml\\nexpress\\n```\\n\\nVous pouvez v\xe9rifier [ici](https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules).\\n\\nAlors, o\xf9 sont toues les d\xe9pendances ? Il y a qu\'un seul dossier dans les `node_modules` appel\xe9 `.pnpm` et il y a un lien symbolique appel\xe9 `express`. Et bien, nous n\'avons install\xe9 que `express`, c\'est donc le seul package auquel votre application doit avoir acc\xe8s\\n\\n> En savoir plus sur pourquoi la rigueur de pnpm est une bonne chose [ici](https://medium.com/pnpm/pnpms-strictness-helps-to-avoid-silly-bugs-9a15fb306308)\\n\\nVoyons ce qu\'il y a \xe0 l\'int\xe9rieur d\'`express`:\\n\\n```text\\n\u25be node_modules\\n  \u25b8 .pnpm\\n  \u25be express\\n    \u25b8 lib\\n      History.md\\n      index.js\\n      LICENSE\\n      package.json\\n      Readme.md\\n  .modules.yaml\\n```\\n\\n`express` n\'a pas de `node_modules` ? O\xf9 sont toutes les d\xe9pendances d\'`express` ?\\n\\nL\'astuce est qu\'`express` n\'est qu\'un lien symbolique. Lorsque Node.js r\xe9sout les d\xe9pendances, il utilise leurs emplacements r\xe9els, il ne conserve donc pas les liens symboliques. Mais o\xf9 est l\'emplacement r\xe9el d\'`express`, vous vous demandez ?\\n\\nIci: [node_modules/.pnpm/express@4.17.1/node_modules/express](https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules/.pnpm/express@4.17.1/node_modules/express).\\n\\nOK, alors maintenant nous connaissons l\'utilit\xe9 du dossier `.pnpm/`. `.pnpm/` stocke tous les packages dans une structure de dossiers plats, de sorte que chaque package peut \xeatre trouv\xe9 dans un dossier nomm\xe9 par ce mod\xe8le:\\n\\n```text\\n.pnpm/<name>@<version>/node_modules/<name>\\n```\\n\\nOn appelle \xe7a le dossier du stockage virtuel.\\n\\nCette structure plate \xe9vite les probl\xe8mes de long chemin caus\xe9s par les `node_modules` cr\xe9\xe9s par npm v2 mais maintient les packages isol\xe9s, contrairement aux `node_modules` plats cr\xe9\xe9s par npm v 3, 4, 5, 6 ou bien Yarn v1.\\n\\nRegardons maintenant le r\xe9el emplacement d\'`express`:\\n\\n```text\\n  \u25be express\\n    \u25b8 lib\\n      History.md\\n      index.js\\n      LICENSE\\n      package.json\\n      Readme.md\\n```\\n\\nEst-ce une arnaque ? Il manque encore `node_modules` ! La deuxi\xe8me astuce de la structure des `node_modules` de pnpm est que les d\xe9pendances des packages se trouvent au m\xeame niveau de r\xe9pertoire que l\'emplacement r\xe9el du package d\xe9pendant. Donc les d\xe9pendances d\'`express` ne sont pas dans `.pnpm/express@4.17.1/node_modules/express/node_modules/` mais dans [.pnpm/express@4.17.1/node_modules/](https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules/.pnpm/express@4.17.1/node_modules):\\n\\n```text\\n\u25be node_modules\\n  \u25be .pnpm\\n    \u25b8 accepts@1.3.5\\n    \u25b8 array-flatten@1.1.1\\n    ...\\n    \u25be express@4.16.3\\n      \u25be node_modules\\n        \u25b8 accepts\\n        \u25b8 array-flatten\\n        \u25b8 body-parser\\n        \u25b8 content-disposition\\n        ...\\n        \u25b8 etag\\n        \u25be express\\n          \u25b8 lib\\n            History.md\\n            index.js\\n            LICENSE\\n            package.json\\n            Readme.md\\n```\\n\\nToutes les d\xe9pendances d\'`express` sont des liens symboliques vers des dossiers appropri\xe9s dans `node_modules/.pnpm/`. Placer les d\xe9pendances d\'`express` un niveau sup\xe9rieur permet d\'\xe9viter les liens symboliques circulaires.\\n\\nDonc, comme vous pouvez le voir, m\xeame si la structure `node_modules` pnpm semble inhabituelle au premier abord:\\n\\n1. il est compl\xe8tement compatible avec Node.js\\n2. les packages sont bien regroup\xe9s avec leurs d\xe9pendances\\n\\nLa structure est un peu [plus complexe](/how-peers-are-resolved) pour les packages avec des d\xe9pendances paires mais l\'id\xe9e est la m\xeame: utiliser des liens symboliques pour cr\xe9er une imbrication avec une structure de dossier plate."}]}')}}]);