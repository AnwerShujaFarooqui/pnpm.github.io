"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6205],{3264:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/12/30/yearly-update","metadata":{"permalink":"/es/blog/2022/12/30/yearly-update","editUrl":"https://translate.pnpm.io/project/pnpm/es-ES","source":"@site/i18n/es/docusaurus-plugin-content-blog/2022-12-30-yearly-update.md","title":"El a\xf1o 2022 para pnpm","description":"Es el final del a\xf1o. Un a\xf1o realmente duro. Como sabr\xe1n, vivo en Ucrania, as\xed que debido a la guerra de Rusia contra nosotros, fue m\xe1s dif\xedcil liderar este proyecto que en a\xf1os anteriores. Sin embargo, fue un buen a\xf1o para pnpm. Tenemos muchos usuarios nuevos, colaboradores y hemos implementado muchas funciones excelentes.","date":"2022-12-30T00:00:00.000Z","formattedDate":"30 de diciembre de 2022","tags":[],"readingTime":2.47,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"El a\xf1o 2022 para pnpm","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48","image":"/img/blog/2022-review.png"},"nextItem":{"title":"El a\xf1o 2021 para pnpm","permalink":"/es/blog/2021/12/29/yearly-update"}},"content":"Es el final del a\xf1o. Un a\xf1o realmente duro. Como sabr\xe1n, vivo en Ucrania, as\xed que debido a la guerra de Rusia contra nosotros, fue m\xe1s dif\xedcil liderar este proyecto que en a\xf1os anteriores. Sin embargo, fue un buen a\xf1o para pnpm. Tenemos muchos usuarios nuevos, colaboradores y hemos implementado muchas funciones excelentes.\\n\\n![](/img/blog/2022-review.png)\\n\\n(La ilustraci\xf3n anterior fue generada por Midjourney. El tigre simboliza el a\xf1o del tigre)\\n\\n\x3c!--truncate--\x3e\\n\\n## Uso\\n\\n### Estad\xedsticas\\n\\nMi objetivo este a\xf1o era vencer a Lerna por el n\xfamero de descargas. Pudimos lograr este objetivo [el](https://npm-stat.com/charts.html?package=pnpm&package=lerna&from=2022-01-01&to=2022-12-30)de agosto:\\n\\n![](/img/blog/pnpm-vs-lerna-stats.png)\\n\\npnpm se descarg\xf3 m\xe1s de [5 veces m\xe1s](https://npm-stat.com/charts.html?package=pnpm&from=2016-12-01&to=2022-12-30) en 2022 que en 2021:\\n\\n![](/img/blog/download-stats-2022.png)\\n\\n### Visitas a la documentaci\xf3n\\n\\nRecopilamos algunas estad\xedsticas no personalizadas de nuestros documentos utilizando Google Analytics. En 2022, a veces tuvimos m\xe1s de 20\xa0000 visitantes \xfanicos por semana. \xa1Esto es 10 veces m\xe1s que en 2021!\\n\\n![](/img/blog/ga-unique-visits-2022.png)\\n\\n### Estrellas en GitHub\\n\\nNuestro [repositorio principal de GitHub](https://github.com/pnpm/pnpm) recibi\xf3 casi +7,000 estrellas este a\xf1o.\\n\\n![](/img/blog/stars-2022.png)\\n\\n### Nuestros colaboradores\\n\\nTuvimos muchos colaboradores nuevos y activos este a\xf1o. Estas son las personas que fusionan al menos una PR en 2022:\\n\\n* [Zoltan Kochan](https://github.com/zkochan)\\n* [chlorine](https://github.com/lvqq)\\n* [await-ovo](https://github.com/await-ovo)\\n* [Brandon Cheng](https://github.com/gluxon)\\n* [Dominic Elm](https://github.com/d3lm)\\n* [MCMXC](https://github.com/mcmxcdev)\\n* [\u90a3\u91cc\u597d\u810f\u4e0d\u53ef\u4ee5](https://github.com/dev-itsheng)\\n* [Homyee King](https://github.com/HomyeeKing)\\n* [Shinobu Hayashi](https://github.com/Shinyaigeek)\\n* [Black-Hole](https://github.com/BlackHole1)\\n* [Kenrick](https://github.com/kenrick95)\\n* [Weyert de Boer](https://github.com/weyert)\\n* [Glen Whitney](https://github.com/gwhitney)\\n* [Cheng](https://github.com/chengcyber)\\n* [zoomdong](https://github.com/fireairforce)\\n* [thinkhalo](https://github.com/ufec)\\n* [\u5b50\u77bb Luci](https://github.com/LuciNyan)\\n* [spencer17x](https://github.com/Spencer17x)\\n* [liuxingbaoyu](https://github.com/liuxingbaoyu)\\n* [\uc7a5\uc9c0\ud6c8](https://github.com/WhiteKiwi)\\n* [Jon de la Motte](https://github.com/jondlm)\\n* [Jack Works](https://github.com/Jack-Works)\\n* [milahu](https://github.com/milahu)\\n* [David Collins](https://github.com/David-Collins)\\n* [nikoladev](https://github.com/nikoladev)\\n* [Igor Bezkrovnyi](https://github.com/ibezkrovnyi)\\n* [Lev Chelyadinov](https://github.com/illright)\\n* [javier-garcia-meteologica](https://github.com/javier-garcia-meteologica)\\n\\n## Caracter\xedsticas destacadas\\n\\n### Compatible con `node_modules` elevados sin enlaces simb\xf3licos (desde [v6.25.0](https://github.com/pnpm/pnpm/releases/tag/v6.25.0))\\n\\nJusto a principios de 2022, agregamos soporte para el izado \\"tradicional\\" (tambi\xe9n conocido como flat `node_modules`). Usamos el algoritmo de elevaci\xf3n de Yarn para crear un `node_modules`izado adecuado. Esta nueva configuraci\xf3n b\xe1sicamente ha hecho que pnpm sea compatible con todas las pilas de Node.js que son compatibles con npm CLI.\\n\\nPara usar la estructura de directorio hoisted `node_modules`, use la configuraci\xf3n `node-linker=hoisted` en un archivo `.npmrc`.\\n\\n### Cach\xe9 de efectos secundarios (desde [v7.0.0](https://github.com/pnpm/pnpm/releases/tag/v7.0.0))\\n\\nDesde v7, [side-effect-cache][] est\xe1 habilitado de forma predeterminada, por lo que las dependencias que deben construirse solo se crean una vez en una m\xe1quina. Esto mejora mucho la velocidad de instalaci\xf3n en proyectos que tienen dependencias con scripts de compilaci\xf3n.\\n\\n### Cach\xe9 de efectos secundarios (desde [v7.4.0](https://github.com/pnpm/pnpm/releases/tag/v7.4.0))\\n\\nSe agreg\xf3 el comando [`pnpm patch`][] para parchear dependencias en sus `node_modules`.\\n\\n### Estrategia de resoluci\xf3n basada en el tiempo (desde [v7.10.0](https://github.com/pnpm/pnpm/releases/tag/v7.10.0))\\n\\nSe agreg\xf3 un nuevo modo de resoluci\xf3n a pnpm, lo que deber\xeda hacer que las dependencias de actualizaci\xf3n sean m\xe1s seguras. Puede cambiar el modo de resoluci\xf3n con la configuraci\xf3n [modo de resoluci\xf3n][].\\n\\n### Listado de licencias de dependencias (desde [v7.17.0](https://github.com/pnpm/pnpm/releases/tag/v7.17.0))\\n\\nAhora puede usar el comando [`pnpm licenses list`][] para verificar las licencias de los paquetes instalados.\\n\\n[side-effect-cache]: /npmrc#side-effects-cache\\n\\n[`pnpm patch`]: /cli/patch\\n\\n[modo de resoluci\xf3n]: https://pnpm.io/npmrc#resolution-mode\\n\\n[`pnpm licenses list`]: /cli/licenses"},{"id":"/2021/12/29/yearly-update","metadata":{"permalink":"/es/blog/2021/12/29/yearly-update","editUrl":"https://translate.pnpm.io/project/pnpm/es-ES","source":"@site/i18n/es/docusaurus-plugin-content-blog/2021-12-29-yearly-update.md","title":"El a\xf1o 2021 para pnpm","description":"Es fin de a\xf1o y fue un buen a\xf1o para pnpm, as\xed que veamos c\xf3mo nos fue.","date":"2021-12-29T00:00:00.000Z","formattedDate":"29 de diciembre de 2021","tags":[],"readingTime":2.68,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"El a\xf1o 2021 para pnpm","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"},"prevItem":{"title":"El a\xf1o 2022 para pnpm","permalink":"/es/blog/2022/12/30/yearly-update"},"nextItem":{"title":"Opciones de configuraci\xf3n de Node-Modules con pnpm","permalink":"/es/blog/2020/10/17/node-modules-configuration-options-with-pnpm"}},"content":"Es fin de a\xf1o y fue un buen a\xf1o para pnpm, as\xed que veamos c\xf3mo nos fue.\\n\\n\x3c!--truncate--\x3e\\n\\n## Uso\\n\\n### Descargar estad\xedsticas\\n\\nMi objetivo este a\xf1o era vencer a Bower por en n\xfamero de descargas. Pudimos lograr este objetivo [en Noviembre](https://npm-stat.com/charts.html?package=pnpm&package=bower&from=2021-01-01&to=2021-12-29):\\n\\n![](/img/blog/pnpm-vs-bower-stats.png)\\n\\npnpm se descarg\xf3 unas [3 veces m\xe1s](https://npm-stat.com/charts.html?package=pnpm&from=2016-12-01&to=2021-12-29) en 2021 que en 2020:\\n\\n![](/img/blog/download-stats-2021.png)\\n\\n:::note\\n\\n\xa1Estas estad\xedsticas ni siquiera miden todas las diferentes formas en que se puede instalar pnpm! Solo miden las descargas de[pnpm npm package](https://www.npmjs.com/package/pnpm). Este a\xf1o tambi\xe9n agregamos versiones binarias compiladas de pnpm, que se entregan de manera diferente.\\n\\n:::\\n\\n### Visitas a la documentaci\xf3n\\n\\nNosotros recogemos estad\xedsticas no personalizadas de nuestra documentaci\xf3n utilizando Google Analytics. En 2021, a veces ten\xedamos mas de 2,000 visitantes \xfanicos a la semana.\\n\\n![](/img/blog/ga-unique-visits-2021.png)\\n\\nLa mayor\xeda de nuestros usuarios son de los Estados Unidos y China.\\n\\n![](/img/blog/countries-2021.png)\\n\\n### Estrellas en GitHub\\n\\nNuestro [repositorio principal de GitHub](https://github.com/pnpm/pnpm) recibi\xf3 +5.000 estrellas este a\xf1o.\\n\\n![](/img/blog/stars-2021.png)\\n\\n### Nuevos usuarios\\n\\nNuestro nuevo usuario m\xe1s grande este a\xf1o es [Bytedance](https://github.com/pnpm/pnpm.github.io/pull/89) (la compa\xf1\xeda detr\xe1s de TikTok).\\n\\nAdem\xe1s, muchos grandes proyectos de c\xf3digo abierto comenzaron a usar pnpm. Algunos cambiaron a pnpm debido a su gran soporte de monorepos:\\n\\n* [Vue](https://github.com/vuejs/vue-next)\\n* [Vite](https://github.com/vitejs/vite)\\n* y [otros](https://pnpm.io/workspaces#usage-examples)\\n\\nAlgunos cambiaron porque les gusta lo eficiente, r\xe1pido y hermoso que es pnpm:\\n\\n* [Autoprefixer](https://twitter.com/Autoprefixer/status/1476226146488692736)\\n* [PostCSS](https://twitter.com/PostCSS/status/1470438664006258701)\\n* [Browserslist](https://twitter.com/Browserslist/status/1468264308308156419)\\n\\n## Caracter\xedsticas destacadas\\n\\n### Nuevo formato de archivo de bloqueo (desde [v6.0.0](https://github.com/pnpm/pnpm/releases/tag/v6.0.0))\\n\\nUno de los primeros y m\xe1s importantes cambios de este a\xf1o fue el nuevo formato `pnpm-lock.yaml`. Este fue un cambio importante, por lo que tuvimos que lanzar v6. Pero fue un \xe9xito. El antiguo archivo de bloqueo causaba conflictos de Git con frecuencia. Desde que se introdujo el nuevo formato, no recibimos ninguna queja sobre conflictos de Git.\\n\\n### Gesti\xf3n de versiones de Node.js (desde [v6.12.0](https://github.com/pnpm/pnpm/releases/tag/v6.12.0))\\n\\nEnviamos un nuevo comando (`pnpm env`) que permite gestionar las versiones de Node.js. Por lo tanto, puede usar pnpm en lugar de los administradores de versiones de Node.js como nvm o Volta.\\n\\nAdem\xe1s, pnpm se env\xeda como un ejecutable independiente, por lo que puede ejecutarlo incluso sin Node.js preinstalado en el sistema.\\n\\n### Inyectando dependencias locales (desde [v6.20.0](https://github.com/pnpm/pnpm/releases/tag/v6.20.0))\\n\\nPuede \\"inyectar\\" una dependencia local. Por defecto, las dependencias locales est\xe1n enlazadas simb\xf3licamente a `node_modules`, pero con esta nueva caracter\xedstica se puede dar instrucciones a pnpm para vincular duramente los archivos del paquete.\\n\\n### Informe mejorado de problemas de dependencia entre pares (desde [v6.24.0](https://github.com/pnpm/pnpm/releases/tag/v6.24.0))\\n\\nLos problemas de dependencia entre pares sol\xedan imprimirse como texto sin formato y era dif\xedcil entenderlos. Ahora est\xe1n todos agrupados e impresos en una bonita estructura jer\xe1rquica.\\n\\n## La competencia\\n\\n### Yarn\\n\\nYarn agreg\xf3 un enlazador pnpm en [v3.1](https://dev.to/arcanis/yarn-31-corepack-esm-pnpm-optional-packages--3hak#new-install-mode-raw-pnpm-endraw-). Entonces, Yarn puede crear una estructura de directorio de m\xf3dulos de node similar a la que crea pnpm.\\n\\nAdem\xe1s, el equipo de Yarn planea implementar un almacenamiento direccionable por contenido para ser m\xe1s eficiente en el uso del espacio en disco.\\n\\n### npm\\n\\nEl equipo de npm decidi\xf3 adoptar tambi\xe9n la estructura de directorios de m\xf3dulos de node enlazados que utiliza pnpm (relacionada con [RFC](https://github.com/npm/rfcs/blob/main/accepted/0042-isolated-mode.md)).\\n\\n### Otros\\n\\n[Bun](https://twitter.com/jarredsumner/status/1473416431291174912/photo/1) escrito en Zig y [Volt](https://github.com/voltpkg/volt) escrito en Rust afirman ser m\xe1s r\xe1pidos que npm/Yarn/pnpm. Todav\xeda no he comparado estos nuevos gestores de paquetes.\\n\\n## Planes futuros\\n\\nM\xe1s r\xe1pido, mejor, el mejor."},{"id":"/2020/10/17/node-modules-configuration-options-with-pnpm","metadata":{"permalink":"/es/blog/2020/10/17/node-modules-configuration-options-with-pnpm","editUrl":"https://translate.pnpm.io/project/pnpm/es-ES","source":"@site/i18n/es/docusaurus-plugin-content-blog/2020-10-17-node-modules-configuration-options-with-pnpm.md","title":"Opciones de configuraci\xf3n de Node-Modules con pnpm","description":"Hay muchas maneras de crear un directorio de los m\xf3dulos de node. Tu objetivo debe ser crear el m\xe1s estricto, pero si eso no es posible, tambi\xe9n hay opciones para hacer un node_modules suelto tambi\xe9n.","date":"2020-10-17T00:00:00.000Z","formattedDate":"17 de octubre de 2020","tags":[],"readingTime":1.925,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"Opciones de configuraci\xf3n de Node-Modules con pnpm","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"},"prevItem":{"title":"El a\xf1o 2021 para pnpm","permalink":"/es/blog/2021/12/29/yearly-update"},"nextItem":{"title":"El node_modules plano no es la \xfanica forma","permalink":"/es/blog/2020/05/27/flat-node-modules-is-not-the-only-way"}},"content":"Hay muchas maneras de crear un directorio de los m\xf3dulos de node. Tu objetivo debe ser crear el m\xe1s estricto, pero si eso no es posible, tambi\xe9n hay opciones para hacer un node_modules suelto tambi\xe9n.\\n\\n\x3c!--truncate--\x3e\\n\\n## La configuraci\xf3n predeterminada\\n\\nDe forma predeterminada, pnpm v6 crear\xe1 un directorio semi estricto de node_modules. Semi estricto significa que tu aplicaci\xf3n solo podr\xe1 requerir paquetes que se agreguen como dependencias a `package.json` (con un par de excepciones). Sin embargo, tus dependencias podr\xe1n acceder a cualquier paquete.\\n\\nLa configuraci\xf3n predeterminada se ve as\xed:\\n\\n```ini\\n; Todos los paquetes son hoisteados a node_modules/.pnpm/node_modules\\nhoist-pattern[]=*\\n\\n; Todos los tipos son hoisteados a la ra\xedz para que TypeScript no moleste\\npublic-hoist-pattern[]=*types*\\n\\n; Todos los paquetes relacionados con ESLint son hoisteados a la ra\xedz tambi\xe9n\\npublic-hoist-pattern[]=*eslint*\\n```\\n\\n## Plug\'nPlay. La configuraci\xf3n m\xe1s estricta\\n\\npnpm soporta [ el Plug\'n\'Play de Yarn](https://yarnpkg.com/features/pnp) desde la v5.9. Con PnP, tanto su aplicaci\xf3n como las dependencias de su aplicaci\xf3n tendr\xe1n acceso solo a sus dependencias declaradas. Esto es a\xfan m\xe1s estricto que establecer `hoist=false` porque dentro de un monorepo, su aplicaci\xf3n no podr\xe1 acceder ni siquiera a las dependencias del proyecto ra\xedz.\\n\\nPara usar Plug\'n\'Play, establezca estos ajustes:\\n\\n```ini\\nnode-linker=pnp\\nsymlink=false\\n```\\n\\n## Un directorio de m\xf3dulos estricto y tradicional\\n\\nSi no est\xe1s listo para usar PnP a\xfan, puedes ser estricto y \xfanicamente permitir que los paquetes accedan a sus propias dependencias fijando la configuraci\xf3n de hoist a falso:\\n\\n```ini\\nhoist=false\\n```\\n\\nSin embargo, si alguna de tus dependencias intentan acceder a paquetes que no forman parte de sus dependencias, tienes dos opciones:\\n\\n1. Crea un archivo `pnpmfile.js` y utiliza un [hook](/pnpmfile) para agregar la dependencia que falta al manifiesto del paquete.\\n\\n2. Agrega un patr\xf3n a la opci\xf3n `hoist-pattern`. Por ejemplo, si el m\xf3dulo que falta es `babel-core`, agrega la siguiente configuraci\xf3n a `.npmrc`:\\n\\n    ```ini\\n    hoist-pattern[]=babel-core\\n    ```\\n\\n## El peor caso - hoisting a la ra\xedz\\n\\nAlgunas herramientas tal vez no funcionen a\xfan con la configuraci\xf3n predeterminada de pnpm, que hoistea todo a la ra\xedz de la virtual store y a algunos paquetes a la ra\xedz. En este caso, puedes hoistear todo o una parte de las dependencias a la ra\xedz del directorio de m\xf3dulos.\\n\\nHoistear todo a la ra\xedz de node_modules:\\n\\n```ini\\nshamefully-hoist=true\\n```\\n\\nHoistear \xfanicamente los paquetes que coincidan con un patr\xf3n:\\n\\n```ini\\npublic-hoist-pattern[]=babel-*\\n```"},{"id":"/2020/05/27/flat-node-modules-is-not-the-only-way","metadata":{"permalink":"/es/blog/2020/05/27/flat-node-modules-is-not-the-only-way","editUrl":"https://translate.pnpm.io/project/pnpm/es-ES","source":"@site/i18n/es/docusaurus-plugin-content-blog/2020-05-27-flat-node-modules-is-not-the-only-way.md","title":"El node_modules plano no es la \xfanica forma","description":"Los nuevos usuarios de pnpm me preguntan con frecuencia sobre la extra\xf1a estructura de node_modules que crea pnpm. \xbfPor qu\xe9 no es plano? \xbfD\xf3nde est\xe1n todas las sub-dependencias?","date":"2020-05-27T00:00:00.000Z","formattedDate":"27 de mayo de 2020","tags":[],"readingTime":2.89,"hasTruncateMarker":true,"authors":[{"name":"Zoltan Kochan","url":"http://twitter.com/zoltankochan","imageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"}],"frontMatter":{"title":"El node_modules plano no es la \xfanica forma","author":"Zoltan Kochan","authorURL":"http://twitter.com/zoltankochan","authorImageURL":"https://gravatar.com/avatar/1f59f040fb37d5799e3879fa678c2373?s=48"},"prevItem":{"title":"Opciones de configuraci\xf3n de Node-Modules con pnpm","permalink":"/es/blog/2020/10/17/node-modules-configuration-options-with-pnpm"}},"content":"Los nuevos usuarios de pnpm me preguntan con frecuencia sobre la extra\xf1a estructura de `node_modules` que crea pnpm. \xbfPor qu\xe9 no es plano? \xbfD\xf3nde est\xe1n todas las sub-dependencias?\\n\\n\x3c!--truncate--\x3e\\n\\n> Voy a suponer que los lectores del art\xedculo ya est\xe1n familiarizados con el `node_modules` plano creado por npm y Yarn. Si no entiendes por qu\xe9 npm 3 tuvo que empezar a usar planos `node_modules` en v3, puedes encontrar algo de prehistoria en [ \xbfPor qu\xe9 debemos usar pnpm?](https://www.kochan.io/nodejs/why-should-we-use-pnpm.html) *(en ingl\xe9s)*.\\n\\nEntonces, \xbfpor qu\xe9 es inusual el `node_modules de pnpm`? Vamos a crear dos directorios y ejecutar `npm add express` en uno de ellos y `pnpm add express` en el otro. Aqu\xed est\xe1 la parte superior de lo que obtienes en `node_modules` del primer directorio:\\n\\n```text\\n.bin\\naccepts\\narray-flatten\\nbody-parser\\nbytes\\ncontent-disposition\\ncookie-signature\\ncookie\\ndebug\\ndepd\\ndestroy\\nee-first\\nencodeurl\\nescape-html\\netag\\nexpress\\n```\\n\\nPuedes ver todo el directorio [aqu\xed](https://github.com/zkochan/comparing-node-modules/tree/master/npm-example/node_modules).\\n\\nY esto es lo que obtienes en los `node_modules` creados por pnpm:\\n\\n```text\\n.pnpm\\n.modules.yaml\\nexpress\\n```\\n\\nPuedes comprobarlo [aqu\xed](https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules).\\n\\nEntonces, \xbfd\xf3nde est\xe1n todas las sub-dependencias? Solo hay una carpeta en `node_modules` llamada `.pnpm` y un enlace simb\xf3lico llamado `express`. Bueno, solo hemos instalado `express`, as\xed que este es el \xfanico paquete al que tu aplicaci\xf3n tiene que tener acceso\\n\\n> Lea m\xe1s sobre por qu\xe9 la rigurosidad de pnpm es algo bueno [aqu\xed](https://medium.com/pnpm/pnpms-strictness-helps-to-avoid-silly-bugs-9a15fb306308) *(en ingl\xe9s)*\\n\\nVeamos qu\xe9 hay dentro de `express`:\\n\\n```text\\n\u25be node_modules\\n  \u25b8 .pnpm\\n  \u25be express\\n    \u25b8 lib\\n      History.md\\n      index.js\\n      LICENSE\\n      package.json\\n      Readme.md\\n  .modules.yaml\\n```\\n\\n\xbf`express` no tiene `node_modules`? \xbfD\xf3nde est\xe1n todas las dependencias de `express`?\\n\\nEl truco est\xe1 en que `express` es s\xf3lo un enlace simb\xf3lico. Cuando Node.js resuelve las dependencias, usa sus ubicaciones reales, por lo que no conserva los enlaces simb\xf3licos. Pero, \xbfd\xf3nde est\xe1 la ubicaci\xf3n real de `express`, podr\xedas preguntarte?\\n\\nAqu\xed: [node_modules/.pnpm/express@4.17.1/node_modules/express](https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules/.pnpm/express@4.17.1/node_modules/express).\\n\\nOK, ahora conocemos el prop\xf3sito de la carpeta `.pnpm/`. `.pnpm/` almacena todos los paquetes en una estructura de carpetas plana, por lo que cada paquete se puede encontrar en una carpeta nombrada con este patr\xf3n:\\n\\n```text\\n.pnpm/<name>@<version>/node_modules/<name>\\n```\\n\\nLo llamamos el directorio de almacenamiento virtual.\\n\\nEsta estructura plana evita los problemas de ruta larga causados por los `node_modules` anidados creados por npm v2, pero mantiene los paquetes aislados a diferencia de los `node_modules` planos creados por npm v3,4,5,6 o Yarn v1.\\n\\nAhora veamos la ubicaci\xf3n real de `express`:\\n\\n```text\\n  \u25be express\\n    \u25b8 lib\\n      History.md\\n      index.js\\n      LICENSE\\n      package.json\\n      Readme.md\\n```\\n\\n\xbfEs una estafa? \xa1Todav\xeda le falta `node_modules`! El segundo truco de la estructura de `node_modules` de pnpm es que las dependencias de los paquetes est\xe1n en el mismo nivel de directorio en el que se encuentra la ubicaci\xf3n real del paquete dependiente. As\xed que las dependencias de `express` no est\xe1n en `.pnpm/express@4.17.1/node_modules/express/node_modules/` sino en [.pnpm/express@4.17.1/node_modules/](https://github.com/zkochan/comparing-node-modules/tree/master/pnpm5-example/node_modules/.pnpm/express@4.17.1/node_modules):\\n\\n```text\\n\u25be node_modules\\n  \u25be .pnpm\\n    \u25b8 accepts@1.3.5\\n    \u25b8 array-flatten@1.1.1\\n    ...\\n    \u25be express@4.16.3\\n      \u25be node_modules\\n        \u25b8 accepts\\n        \u25b8 array-flatten\\n        \u25b8 body-parser\\n        \u25b8 content-disposition\\n        ...\\n        \u25b8 etag\\n        \u25be express\\n          \u25b8 lib\\n            History.md\\n            index.js\\n            LICENSE\\n            package.json\\n            Readme.md\\n```\\n\\nTodas las dependencias de `express` son enlaces simb\xf3licos a los directorios apropiados en `node_modules/.pnpm/`. Colocar dependencias de `expreso` en un nivel superior permite evitar enlaces simb\xf3licos circulares.\\n\\nAs\xed que como puedes ver, a pesar de que la estructura `node_modules` de pnpm parece inusual al principio:\\n\\n1. es completamente compatible con Node.js\\n2. los paquetes est\xe1n bien agrupados con sus dependencias\\n\\nLa estructura es un poco [m\xe1s compleja](/how-peers-are-resolved) para paquetes con dependencias entre pares, pero la idea es la misma: usar enlaces simb\xf3licos para crear un anidamiento con una estructura de directorio plana."}]}')}}]);